---
doc: |
  Development workflow usable locally and currently in use by xNVMe CI

  * guest_{kill,init,start,check}: Provision a qemu guest with multiple NVMe
    controllers and namespaces You can also use this workflow to run against a
    physical machine, when doing so, then simply skip the steps named 'guest_*'

  * xnvme_{sync,clean,build,install}: Synchronize local git-branch with remote,
    then configure, build and install it

  The operating system is defined by the bootable system-image in the cijoe
  config-section qemu.guests.GUEST_NAME, specifically 
  init_using_bootimage.url
  init_using_bootimage.img

steps:
- name: guest_kill
  uses: qemu.guest_kill

- name: guest_init
  uses: qemu.guest_init_using_bootimage

- name: guest_start
  uses: xnvme_guest_start_nvme

- name: guest_check
  run: |
    hostname

- name: xnvme_source_sync
  uses: git_sync
  with:
    repository:
      upstream: '{{ config.xnvme.repository.remote }}'
      branch: '{{ config.xnvme.repository.sync.branch }}'
      remote_alias: '{{ config.xnvme.repository.sync.remote_alias }}'
      path:
        local: '{{ config.xnvme.repository.path }}'
        remote: '{{ config.xnvme.repository.sync.remote_path }}'

- name: xnvme_build_prep
  uses: xnvme_build_prep
  with:
    xnvme_source: '{{ config.xnvme.repository.sync.remote_path }}'

- name: xnvme_build
  uses: xnvme_build
  with:
    xnvme_source: '{{ config.xnvme.repository.sync.remote_path }}'

- name: xnvme_install
  uses: xnvme_install
  with:
    xnvme_source: '{{ config.xnvme.repository.sync.remote_path }}'

- name: ldconfig
  run: ldconfig /usr/local/lib/ || true

- name: xnvme_bindings_py_build
  uses: xnvme_bindings_py_build
  with:
    xnvme_source: '{{ config.xnvme.repository.sync.remote_path }}'

- name: fio_prep
  uses: fio_prep
  with:
    xnvme_source: '{{ config.xnvme.repository.sync.remote_path }}'
