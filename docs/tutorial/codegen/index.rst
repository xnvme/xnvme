.. _sec-tutorials-codegen:

======================
 xNVMe Code Generator
======================

The **xNVMe** projects makes use of different techniques for generating code in
different forms. The following items are generated by tools:

* The xNVMe NVMe API

  - The NVMe definitions are helpers are produced using multiple tools

  - :senfd:`senfd <>` extracts definitions from specification documents
   
  - A code-emitter based on :yace:`yace <>` produces definitions,
    pretty-printers, and command-preppers

* The xNVMe core API

  - A pseudo-c header-definition defines the core xNVMe API

  - A code-emitter based on :yace:`yace <>` produces the actual xNVMe C API

    - All structs have pretty-printers in JSON and YAML format
    - Portability patterns are enforced
    - Composable headers are ensured

* The Python bindings to the **xNVMe** **C**

* The Rust bindings to the xNVMe **c** library

Many thousands lines of codes are emitted from these generators, lowering human
errors in interpretation of specification documents. Heavily reduces redundant
human programming efforts.


.. _sec-tutorials-codegen-nvme-model:

NVMe Model
==========

Tabular data is extracted from specification documents in ``.docx`` format.
Once extracted, the data is classified and annotated. In the final phase, the
extracted and annotated data is compiled into a model document.

The model document combines multiple tables, for example, when tables describe
the DWords of a command SQE. The DWord descriptions are merged into a parent
SQE description, which is then included in a command description. Commands
are further organized into a command-set description. For an overview of this
orchestration, refer to the generated file.

Tools such as ``jless``` are excellent for quickly navigating large structural
documents such as the one created here. This document forms the input for
generating C code for definitions, pretty-printer, command-preppers etc.

To produce the model document then:

* Ensure that the :senfd:`senfd <>` tool is available

  - It produces the structured description of **NVMe** in ``.json`` format

* Place all specification documents in the folder: ``specs/``

  - The documents must be in ``.docx``` format

* Run the :senfd:`senfd <>` command-line tool

  - ``senfd specs/*.docx```
